From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KatanaMajesty <sasha.panasenk@gmail.com>
Date: Thu, 14 Jul 2022 19:16:16 +0300
Subject: [PATCH] Airplane dont allocate iterators in Inventory


diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index a1a625a8dacf4d2bbf75ddd90dce1b1be663c919..58bd8a6da77400db20138426e8cd96c74c8b35f7 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -649,20 +649,21 @@ public class Inventory implements Container, Nameable {
     }
 
     public void dropAll() {
-        Iterator iterator = this.compartments.iterator();
+        // Bloom start - don't allocate iterators
+        /* Iterator iterator = this.compartments.iterator(); */
 
-        while (iterator.hasNext()) {
-            List<ItemStack> list = (List) iterator.next();
+        for (int i = 0; i < this.compartments.size(); i++) { // Bloom
+            NonNullList<ItemStack> list = this.compartments.get(i);
 
-            for (int i = 0; i < list.size(); ++i) {
-                ItemStack itemstack = (ItemStack) list.get(i);
+            for (int j = 0; j < list.size(); ++j) {
+                ItemStack itemstack = (ItemStack) list.get(j);
 
                 if (!itemstack.isEmpty()) {
                     this.player.drop(itemstack, true, false);
-                    list.set(i, ItemStack.EMPTY);
+                    list.set(j, ItemStack.EMPTY);
                 }
             }
-        }
+        } // Bloom end
 
     }
 
@@ -680,7 +681,22 @@ public class Inventory implements Container, Nameable {
         return this.player.isRemoved() ? false : player.distanceToSqr((Entity) this.player) <= 64.0D;
     }
 
+    // Bloom start - don't allocate iterators in Inventory::contains (from Airplane)
+    public boolean containsImpl(Predicate<ItemStack> predicate) {
+        for (int i = 0; i < this.compartments.size(); i++) {
+            NonNullList<ItemStack> list = this.compartments.get(i);
+            for (int j = 0; j < list.size(); j++) {
+                if (predicate.test(list.get(j))) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    } // Bloom end
+
     public boolean contains(ItemStack stack) {
+        /* Bloom - moved into Inventory::containsImpl
         Iterator iterator = this.compartments.iterator();
 
         while (iterator.hasNext()) {
@@ -696,10 +712,12 @@ public class Inventory implements Container, Nameable {
             }
         }
 
-        return false;
+        return false; */
+        return containsImpl(itemStack -> !itemStack.isEmpty() && itemStack.sameItem(stack));
     }
 
     public boolean contains(TagKey<Item> tag) {
+        /* Bloom - moved into Inventory::containsImpl
         Iterator iterator = this.compartments.iterator();
 
         while (iterator.hasNext()) {
@@ -715,7 +733,8 @@ public class Inventory implements Container, Nameable {
             }
         }
 
-        return false;
+        return false; */
+        return containsImpl(itemStack -> !itemStack.isEmpty() && itemStack.is(tag));
     }
 
     public void replaceWith(Inventory other) {
@@ -728,24 +747,36 @@ public class Inventory implements Container, Nameable {
 
     @Override
     public void clearContent() {
+        // Bloom start - avoid iterator allocations
+        /*
         Iterator iterator = this.compartments.iterator();
 
         while (iterator.hasNext()) {
             List<ItemStack> list = (List) iterator.next();
 
             list.clear();
-        }
+        } */
+
+        for (int i = 0; i < this.compartments.size(); i++) {
+            this.compartments.get(i).clear();
+        } // Bloom end
 
     }
 
     public void fillStackedContents(StackedContents finder) {
+        // Bloom start - avoid iterator allocations
+        /*
         Iterator iterator = this.items.iterator();
 
         while (iterator.hasNext()) {
             ItemStack itemstack = (ItemStack) iterator.next();
 
             finder.accountSimpleStack(itemstack);
-        }
+        } */
+
+        for (int i = 0; i < this.items.size(); i++) {
+            finder.accountSimpleStack(this.items.get(i));
+        } // Bloom end
 
     }
 
