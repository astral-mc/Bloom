From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KatanaMajesty <sasha.panasenk@gmail.com>
Date: Fri, 15 Jul 2022 19:23:43 +0300
Subject: [PATCH] Airplane dynamic brain activation


diff --git a/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java b/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java
index 56a2b2954ba89a34b09e0ed0441d0913e044d829..e1c0107a637f2981262ef6d5c2af7c1cc4c8ebd2 100644
--- a/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java
+++ b/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java
@@ -1,6 +1,8 @@
 package com.katanamajesty.bloom.server;
 
 import io.papermc.paper.util.JarManifests;
+import net.minecraft.core.Registry;
+import net.minecraft.world.entity.EntityType;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
@@ -13,6 +15,7 @@ import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.jar.Manifest;
@@ -117,9 +120,29 @@ public class BloomConfig {
 
     public static int maxChunksLoadedByProjectilesPerTick;
     public static int maxChunksLoadedPerProjectile;
+    // Dynamic brain activation from Airplane
+    public static boolean enableDBA;
+    public static int startDBA;
+    public static int startDBASquared;
+    public static int maxActivationFreq;
+    public static int activationDistModifier;
     private static void entities() {
         BloomConfig.maxChunksLoadedByProjectilesPerTick = BloomConfig.getInt("entity.max-chunk-loads-by-proj-per-tick", 8);
         BloomConfig.maxChunksLoadedPerProjectile = BloomConfig.getInt("entity.max-chunk-loads-per-proj", 8);
+
+        // Dynamic brain activation from Airplane
+        BloomConfig.startDBA = BloomConfig.getInt("entity.start-distance", 12);
+        BloomConfig.startDBASquared = startDBA * startDBA;
+        BloomConfig.maxActivationFreq = BloomConfig.getInt("entity.max-tick-freq", 20);
+        // freq = distToPlayer^2 / 2^activationDistModifier
+        BloomConfig.activationDistModifier = BloomConfig.getInt("entity.activation-dist-modifier", 8);
+
+        Registry.ENTITY_TYPE.forEach(entityType -> entityType.dbaEnabled = true);
+        List<String> whitelisted = getList("entity.dba-whitelist-entities", Collections.emptyList());
+        whitelisted.forEach(s -> {
+            EntityType.byString(s).ifPresentOrElse(entityType -> entityType.dbaEnabled = false,
+                    () -> org.bukkit.Bukkit.getLogger().warning("Unknown entity \"" + s + "\""));
+        });
     }
 
     public static boolean enableMessageSignatures;
@@ -155,4 +178,17 @@ public class BloomConfig {
         BloomConfig.config.addDefault(path, def);
         return BloomConfig.config.getDouble(path, BloomConfig.config.getDouble(path));
     }
+
+    public static void setComment(@NotNull String path, String... comment) {
+        if (config.contains(path)) {
+            config.setComments(path, Collections.singletonList(String.join("\n", comment)));
+        }
+    }
+
+    // maybe unsafe!
+    @SuppressWarnings("unchecked")
+    public static <T> List<T> getList(String path, @NotNull List<T> def) {
+        BloomConfig.config.addDefault(path, def);
+        return (List<T>) BloomConfig.config.getList(path, BloomConfig.config.getList(path));
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index b0728b66c54dc22a5a98f150910d07f4b38ebd7e..6e02a3a7ecc03d82413f4bddc521b607b6b185c9 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -386,6 +386,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public long activatedTick = Integer.MIN_VALUE;
     public void inactiveTick() { }
     // Spigot end
+    // Bloom start
+    public int activatedFreq = com.katanamajesty.bloom.server.BloomConfig.maxActivationFreq;
+    // Bloom end
     // Paper start
     public long activatedImmunityTick = Integer.MIN_VALUE; // Paper
     public boolean isTemporarilyActive = false; // Paper
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index ac0f0a4da4282c13f6e1f37710cb615d66b8ef2c..a48e924d5caab6aae8923986c5ceec70a49a985a 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -305,6 +305,8 @@ public class EntityType<T extends Entity> implements EntityTypeTest<Entity, T> {
         return Registry.ENTITY_TYPE.getOptional(ResourceLocation.tryParse(id));
     }
 
+    public boolean dbaEnabled = false; // Bloom
+
     // Paper start - add id
     public final String id;
 
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 3646b969fa51b9683ab4137e530c3a6f6fc6c465..3cb9f63878b76cde745e3343189eca82d038ac39 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -214,10 +214,10 @@ public abstract class Mob extends LivingEntity {
     @Override
     public void inactiveTick() {
         super.inactiveTick();
-        if (this.goalSelector.inactiveTick()) {
+        if (this.goalSelector.inactiveTick(this.activatedFreq, true)) { // Bloom - DBA from Airplane
             this.goalSelector.tick();
         }
-        if (this.targetSelector.inactiveTick()) {
+        if (this.targetSelector.inactiveTick(this.activatedFreq, true)) { // Bloom - DBA from Airplane
             this.targetSelector.tick();
         }
     }
@@ -854,17 +854,25 @@ public abstract class Mob extends LivingEntity {
 
         if (i % 2 != 0 && this.tickCount > 1) {
             this.level.getProfiler().push("targetSelector");
-            this.targetSelector.tickRunningGoals(false);
+            if (this.targetSelector.inactiveTick(this.activatedFreq, false)) { // Bloom start
+                this.targetSelector.tickRunningGoals(false);
+            } // Bloom end
             this.level.getProfiler().pop();
             this.level.getProfiler().push("goalSelector");
-            this.goalSelector.tickRunningGoals(false);
+            if (this.goalSelector.inactiveTick(this.activatedFreq, false)) { // Bloom start
+                this.goalSelector.tickRunningGoals(false);
+            } // Bloom end
             this.level.getProfiler().pop();
         } else {
             this.level.getProfiler().push("targetSelector");
-            this.targetSelector.tick();
+            if (this.targetSelector.inactiveTick(this.activatedFreq, false)) { // Bloom start
+                this.targetSelector.tick();
+            } // Bloom end
             this.level.getProfiler().pop();
             this.level.getProfiler().push("goalSelector");
-            this.goalSelector.tick();
+            if (this.goalSelector.inactiveTick(this.activatedFreq, false)) { // Bloom start
+                this.goalSelector.tick();
+            } // Bloom end
             this.level.getProfiler().pop();
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
index 42d466f7f162943886078eba3db18f2dfc2d7bee..b4288c25d5e2b4e5b42fff11c1edd87e3c9ebacd 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
@@ -37,7 +37,12 @@ public class VillagerPanicTrigger extends Behavior<Villager> {
 
     @Override
     protected void tick(ServerLevel serverLevel, Villager villager, long l) {
-        if (l % 100L == 0L) {
+        // Bloom start - Golem spawn optimization from Airplane
+        if (villager.nextGolemPanic < 0) {
+            villager.nextGolemPanic = l + 100L;
+        }
+        if (--villager.nextGolemPanic < l) {
+            villager.nextGolemPanic = -1; // Bloom end
             villager.spawnGolemIfNeeded(serverLevel, l, 3);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
index a910189177da0c1134c954b3d81b9e9bc4bc1420..290ffab2767f3b7c8c662166645eeff23b65be6d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -50,9 +50,14 @@ public class GoalSelector {
     }
 
     // Paper start
-    public boolean inactiveTick() {
+    public boolean inactiveTick(int tickRate, boolean inactive) { // Bloom start - DBA from Airplane
+        if (inactive && !com.katanamajesty.bloom.server.BloomConfig.enableDBA) {
+            tickRate = 4; // paper's default value
+        }
+        tickRate = Math.min(tickRate, this.newGoalRate);
         this.curRate++;
-        return this.curRate % this.newGoalRate == 0;
+        return this.curRate % tickRate == 0;
+        // Bloom end
     }
     public boolean hasTasks() {
         for (WrappedGoal task : this.availableGoals) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index da5e6141f548539cac720aba558e1b6f3a87e474..6661dc0ea929df49318e02a3167104940f7e4f90 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -283,10 +283,14 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
         return true;
     }
 
+    private int behaviorTick = 0; // Bloom - DBA from Airplane
+
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("axolotlBrain");
-        this.getBrain().tick((ServerLevel) this.level, this);
+        if (this.behaviorTick++ % this.activatedFreq == 0) { // Bloom start
+            this.getBrain().tick((ServerLevel) this.level, this);
+        } // Bloom end
         this.level.getProfiler().pop();
         this.level.getProfiler().push("axolotlActivityUpdate");
         AxolotlAi.updateActivity(this);
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 3dd4e6d622a6daafa00ae971edd88a147e34beef..a9b7cdfa1a4922d4a5c089bf99fbb90e34fe1e8b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -76,9 +76,12 @@ public class Tadpole extends AbstractFish {
         return SoundEvents.TADPOLE_FLOP;
     }
 
+    private int behaviorTick = 0; // Bloom
+
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("tadpoleBrain");
+        if (this.behaviorTick++ % this.activatedFreq == 0) // Bloom
         this.getBrain().tick((ServerLevel) this.level, this);
         this.level.getProfiler().pop();
         this.level.getProfiler().push("tadpoleActivityUpdate");
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 56dd01801f56c56d07101e7e22b58ac059f5f07f..fb65c2d84cac7210b21dc2dbf2117f00f49afb74 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -163,10 +163,14 @@ public class Goat extends Animal {
         return (Brain<Goat>) super.getBrain(); // CraftBukkit - decompile error
     }
 
+    private int behaviorTick = 0; // Bloom - DBA from Airplane
+
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("goatBrain");
-        this.getBrain().tick((ServerLevel) this.level, this);
+        if (this.behaviorTick++ % this.activatedFreq == 0) { // Bloom start
+            this.getBrain().tick((ServerLevel) this.level, this);
+        } // Bloom end
         this.level.getProfiler().pop();
         this.level.getProfiler().push("goatActivityUpdate");
         GoatAi.updateActivity(this);
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 45741410a13cffe3419e34b5607b048bbcf1c3ff..1a4b73e23f89cd61b14214089b46bf4f8244afdf 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -126,10 +126,13 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
         return (Brain<Hoglin>) super.getBrain(); // Paper - decompile fix
     }
 
+    private int behaviorTick = 0; // Bloom - DBA from Airplane
+
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("hoglinBrain");
-        this.getBrain().tick((ServerLevel)this.level, this);
+        if (this.behaviorTick++ % this.activatedFreq == 0) // Bloom
+            this.getBrain().tick((ServerLevel)this.level, this);
         this.level.getProfiler().pop();
         HoglinAi.updateActivity(this);
         if (this.isConverting()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 793576928dad6752dddd86e62d4c0800d8515fc4..17d8b56a2d1a784fd2c5a3b57934f0f04b8235b6 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -289,10 +289,13 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
         return !this.cannotHunt;
     }
 
+    private int behaviorTick = 0; // Bloom - DBA from Airplane
+
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("piglinBrain");
-        this.getBrain().tick((ServerLevel) this.level, this);
+        if (this.behaviorTick++ % this.activatedFreq == 0) // Bloom
+            this.getBrain().tick((ServerLevel) this.level, this);
         this.level.getProfiler().pop();
         PiglinAi.updateActivity(this);
         super.customServerAiStep();
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 27bd70dc30c8472e5a80f3273f9233a0392f831d..484491387082c9d75a21723960635158f9020789 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -270,11 +270,14 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
 
     }
 
+    private int behaviorTick = 0; // Bloom
+
     @Override
     protected void customServerAiStep() {
         ServerLevel worldserver = (ServerLevel) this.level;
 
         worldserver.getProfiler().push("wardenBrain");
+        if (this.behaviorTick++ % this.activatedFreq == 0) // Bloom
         this.getBrain().tick(worldserver, this);
         this.level.getProfiler().pop();
         super.customServerAiStep();
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 10b45ec24a5a0867106d1694312385ad1e267f43..7429afa7b2f683f02c09195886313f7ac7beb9a0 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -140,6 +140,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         return holder.is(PoiTypes.MEETING);
     });
 
+    public long nextGolemPanic = -1; // Bloom - DBA from Airplane
+
     public Villager(EntityType<? extends Villager> entityType, Level world) {
         this(entityType, world, VillagerType.PLAINS);
     }
@@ -243,11 +245,18 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
     // Spigot End
 
+    private int behaviorTick = 0; // Bloom - DBA from Airplane
+
     @Override
     protected void customServerAiStep() { mobTick(false); }
     protected void mobTick(boolean inactive) {
         this.level.getProfiler().push("villagerBrain");
-        if (!inactive) this.getBrain().tick((ServerLevel) this.level, this); // Paper
+        // Bloom start - DBA from Airplane
+        if (!inactive) {
+            if (this.behaviorTick++ % this.activatedFreq == 0) {
+                this.getBrain().tick((ServerLevel) this.level, this);
+            }
+        } // Bloom end
         this.level.getProfiler().pop();
         if (this.assignProfessionWhenSpawned) {
             this.assignProfessionWhenSpawned = false;
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 1a1a1f4d0ac025daccc2d3f84faf6592819f4d5c..7c77740f4e18bb01a108ab86e18568dc54a8461b 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -38,6 +38,7 @@ import co.aikar.timings.MinecraftTimings;
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3; // Bloom
 
 public class ActivationRange
 {
@@ -215,6 +216,21 @@ public class ActivationRange
             for (int i = 0; i < entities.size(); i++) {
                 Entity entity = entities.get(i);
                 ActivationRange.activateEntity(entity);
+
+                // Bloom start - DBA from Airplane
+                if (com.katanamajesty.bloom.server.BloomConfig.enableDBA && entity.getType().dbaEnabled) {
+                    Vec3 playerPos = player.position();
+                    Vec3 entityPos = entity.position();
+                    double dx = playerPos.x - entityPos.x;
+                    double dy = playerPos.y - entityPos.y;
+                    double dz = playerPos.z - entityPos.z;
+                    int sqDist = (int) (dx*dx + dy*dy + dz*dz);
+                    entity.activatedFreq = sqDist > com.katanamajesty.bloom.server.BloomConfig.startDBASquared ?
+                            Math.max(1, Math.min(sqDist >> com.katanamajesty.bloom.server.BloomConfig.activationDistModifier, com.katanamajesty.bloom.server.BloomConfig.maxActivationFreq))
+                            : 1;
+                } else {
+                    entity.activatedFreq = 1;
+                } // Bloom end
             }
             // Paper end
         }
@@ -231,12 +247,12 @@ public class ActivationRange
         if ( MinecraftServer.currentTick > entity.activatedTick )
         {
             if ( entity.defaultActivationState )
-            {
+            { // Bloom - diff on change (Airplane)
                 entity.activatedTick = MinecraftServer.currentTick;
                 return;
             }
             if ( entity.activationType.boundingBox.intersects( entity.getBoundingBox() ) )
-            {
+            { // Bloom - diff on change (Airplane)
                 entity.activatedTick = MinecraftServer.currentTick;
             }
         }
