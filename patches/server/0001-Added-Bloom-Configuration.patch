From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KatanaMajesty <sasha.panasenk@gmail.com>
Date: Mon, 27 Jun 2022 23:19:26 +0300
Subject: [PATCH] Added Bloom Configuration


diff --git a/build.gradle.kts b/build.gradle.kts
index 2374cc9bab5039d0a0dc11d4b2ec573ab75778a7..363de68dd096e2d6f47518fb9c162d3b83635b5a 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -9,8 +9,8 @@ plugins {
 }
 
 dependencies {
-    implementation(project(":paper-api"))
-    implementation(project(":paper-mojangapi"))
+    implementation(project(":bloom-api")) // Bloom
+    implementation("io.papermc.paper:paper-mojangapi:1.19-R0.1-SNAPSHOT") // Bloom
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.21.0")
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
@@ -58,13 +58,13 @@ tasks.jar {
     manifest {
         val git = Git(rootProject.layout.projectDirectory.path)
         val gitHash = git("rev-parse", "--short=7", "HEAD").getText().trim()
-        val implementationVersion = System.getenv("BUILD_NUMBER") ?: "\"$gitHash\""
+        val implementationVersion = "\"$gitHash\"" // Bloom
         val date = git("show", "-s", "--format=%ci", gitHash).getText().trim() // Paper
         val gitBranch = git("rev-parse", "--abbrev-ref", "HEAD").getText().trim() // Paper
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
             "Implementation-Title" to "CraftBukkit",
-            "Implementation-Version" to "git-Paper-$implementationVersion",
+            "Implementation-Version" to "git-Bloom-Version-$implementationVersion", // Bloom
             "Implementation-Vendor" to date, // Paper
             "Specification-Title" to "Bukkit",
             "Specification-Version" to project.version,
@@ -171,11 +171,12 @@ fun TaskContainer.registerRunTask(
         .asFile
     javaLauncher.set(project.javaToolchains.defaultJavaLauncher(project))
 
-    if (rootProject.childProjects["test-plugin"] != null) {
-        val testPluginJar = rootProject.project(":test-plugin").tasks.jar.flatMap { it.archiveFile }
-        inputs.file(testPluginJar)
-        args("-add-plugin=${testPluginJar.get().asFile.absolutePath}")
-    }
+    // Bloom - start
+//    if (rootProject.childProjects["test-plugin"] != null) {
+//        val testPluginJar = rootProject.project(":test-plugin").tasks.jar.flatMap { it.archiveFile }
+//        inputs.file(testPluginJar)
+//        args("-add-plugin=${testPluginJar.get().asFile.absolutePath}")
+//    } // Bloom - end, unused
 
     args("--nogui")
     systemProperty("net.kyori.adventure.text.warnWhenLegacyFormattingDetected", true)
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 06bff37e4c1fddd3be6343049a66787c63fb420c..0a481c9807261b920a18a44c53d29ebbd95711de 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -241,7 +241,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
+            pair("bloom", mapAsJSON(Bukkit.spigot().getBloomConfig(), null))
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 7b1843e16745ca8db2244e17490d291401f22679..1f8ebabcfed61912452e835ebd165c003357fdec 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
             boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
             // Only start Metrics, if it's enabled in the config
             if (config.getBoolean("enabled", true)) {
-                Metrics metrics = new Metrics("Paper", serverUUID, logFailedRequests, Bukkit.getLogger());
+                Metrics metrics = new Metrics("Bloom", serverUUID, logFailedRequests, Bukkit.getLogger());
 
                 metrics.addCustomChart(new Metrics.SimplePie("minecraft_version", () -> {
                     String minecraftVersion = Bukkit.getVersion();
@@ -603,7 +603,7 @@ public class Metrics {
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
-                metrics.addCustomChart(new Metrics.SimplePie("paper_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
+                metrics.addCustomChart(new Metrics.SimplePie("bloom_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
diff --git a/src/main/java/com/katanamajesty/bloom/BloomVersionFetcher.java b/src/main/java/com/katanamajesty/bloom/BloomVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..0441d296e9499b3e6b979353a8c8020d88ad8a12
--- /dev/null
+++ b/src/main/java/com/katanamajesty/bloom/BloomVersionFetcher.java
@@ -0,0 +1,98 @@
+package com.katanamajesty.bloom;
+
+import com.destroystokyo.paper.util.VersionFetcher;
+import com.google.common.base.Charsets;
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSyntaxException;
+import io.papermc.paper.util.JarManifests;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.List;
+import java.util.jar.Manifest;
+
+public class BloomVersionFetcher implements VersionFetcher {
+
+    private final long cacheTime = 720_000;
+    private static final @NotNull String gitBranch = "ver/1.19";
+    private static final @NotNull String gitRepository = "astral-mc/Bloom";
+    private static final @NotNull String gitCommitComparison = "https://api.github.com/repos/%s/compare/%s...%s";
+
+    @Override
+    public long getCacheTime() {
+        return this.cacheTime;
+    }
+
+    @Override
+    public @NotNull Component getVersionMessage(@NotNull String serverVersion) {
+        return getRelevanceComponent();
+    }
+
+    private Component getRelevanceComponent() {
+        Manifest manifest = JarManifests.manifest(Bukkit.getServer().getClass());
+        assert manifest != null; // IDE run isn't supported
+        @Nullable final String commitHash = manifest.getMainAttributes().getValue("Git-Commit");
+
+        List<Object> commitInformation = getVersionRelevance(commitHash);
+
+        if (commitInformation == null) {
+            return Component.text("Couldn't obtain and/or compare Bloom version (You are probably using fork)");
+        } else if (commitInformation.size() == 1) {
+            int commitDistance = (int) commitInformation.get(0);
+            if (commitDistance == 0) { // Identical
+                return Component.text("Running the latest version of Bloom", NamedTextColor.GREEN);
+            } else if (commitDistance < 0) { // Behind
+                return Component.text("Running outdated version of Bloom (" + Math.abs(commitDistance) + " commits behind)", NamedTextColor.YELLOW);
+            } else { // Ahead
+                return Component.text("Probably, running on development branch of Bloom (" + commitDistance + " commits ahead)", NamedTextColor.AQUA);
+            }
+        } else { // Size 2
+            int commitsBehind = Math.abs((int) commitInformation.get(0));
+            int commitsAhead = (int) commitInformation.get(1);
+            return Component.text("Probably, running on development branch of Bloom " +
+                    "(" + commitsBehind + " commits behind and " + commitsAhead + " commits ahead)", NamedTextColor.AQUA);
+        }
+    }
+
+    // Thanks to Techcable's <Techcable@outlook.com> contribution in PaperMC/Paper GH-65
+    // returned List guaranteed to contain raw-type ints if not null
+    @Nullable
+    private List<Object> getVersionRelevance(@Nullable String commitHash) {
+        if (commitHash == null) {
+            return null;
+        }
+        try {
+            HttpURLConnection connection = (HttpURLConnection) new URL(String.format(gitCommitComparison, gitRepository, gitBranch, commitHash)).openConnection();
+            connection.connect();
+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {
+                return null;
+            }
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                String status = obj.get("status").getAsString();
+                switch (status) {
+                    case "identical" -> { return List.of(0); }
+                    case "behind" -> { return List.of(-obj.get("behind_by").getAsInt()); } // Behind
+                    case "diverged" -> { return List.of(-obj.get("behind_by").getAsInt(), obj.get("ahead_by").getAsInt()); } // Ahead and behind by commits
+                    case "ahead" -> { return List.of(obj.get("ahead_by").getAsInt()); } // Ahead by commits
+                    default -> { return null; }
+                }
+            } catch (JsonSyntaxException | NumberFormatException e) {
+                e.printStackTrace();
+                return null;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+}
diff --git a/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java b/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..10b18fb1febbe548489fb026fdb13ca201f55f9d
--- /dev/null
+++ b/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java
@@ -0,0 +1,133 @@
+package com.katanamajesty.bloom.server;
+
+import io.papermc.paper.util.JarManifests;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.craftbukkit.CraftServer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.Optional;
+import java.util.jar.Manifest;
+
+public class BloomConfig {
+
+    //    private static final String configurationFolder = ".";
+    public static String minecraftVersion;
+    public static final @NotNull YamlConfiguration config = new YamlConfiguration();
+    private static @Nullable File configurationFile = null;
+    private static final @NotNull String configurationHeader = """
+            This is Bloom's main configuration file. Last commit at: %s
+            Bloom is not intended and not suitable for public use. At least not yet.
+            Be aware, that some changes may heavily affect server's stability and performance in both positive and negative meanings
+            Nevertheless, you are free to use and modify Bloom""";
+    public static int version;
+    public static boolean verbose;
+
+    public static void init(@Nullable File file) {
+        minecraftVersion = ((CraftServer) Bukkit.getServer()).getMinecraftVersion();
+        if (file == null) {
+            Bukkit.getLogger().warning("Failed to load Bloom configuration file: Couldn't find provided file");
+        }
+        configurationFile = file;
+
+        assert configurationFile != null; // should never happen in release
+        if (configurationFile.exists()) {
+            try {
+                config.load(configurationFile);
+            } catch (IOException | InvalidConfigurationException e) {
+                Bukkit.getLogger().warning("Failed to load Bloom configuration file: " + e.getLocalizedMessage());
+            }
+        }
+
+        Manifest manifest = JarManifests.manifest(Bukkit.getServer().getClass());
+        assert manifest != null; // IDE is not supported
+        @Nullable String commitDate = manifest.getMainAttributes().getValue("Implementation-Vendor");
+        if (commitDate == null) {
+            commitDate = "<Unknown>";
+        }
+        config.options().setHeader(List.of(String.format(configurationHeader, commitDate).split("\n")));
+        config.options().copyDefaults(true);
+        int defaultVersion = Integer.parseInt(minecraftVersion.replaceAll("\\.", ""));
+        Bukkit.getLogger().info("Default version value: " + defaultVersion);
+        version = config.getInt("config-version", defaultVersion);
+        BloomConfig.set("config-version", defaultVersion);
+        BloomConfig.readConfig(BloomConfig.class, null);
+    }
+
+    public static void readConfig(Class<?> clazz, Object object) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterCount() == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(object);
+                    } catch (IllegalAccessException | InvocationTargetException e) {
+                        Bukkit.getLogger().warning("Error invoking " + method.toGenericString() + ": " + e.getLocalizedMessage());
+                    }
+                }
+            }
+        }
+        BloomConfig.save();
+    }
+
+    public static void save() {
+        try {
+            assert BloomConfig.configurationFile != null;
+            BloomConfig.config.save(BloomConfig.configurationFile);
+        } catch (IOException e) {
+            Bukkit.getLogger().warning("Failed to save configuration: " + e.getLocalizedMessage());
+        }
+    }
+
+    public static void set(@NotNull String path, @Nullable Object value) {
+        config.set(path, value);
+    }
+
+    public static void log(@Nullable String message) {
+        if (message != null && verbose) {
+            Bukkit.getLogger().severe(message);
+        }
+    }
+
+    public static boolean timingsReallyEnabled; // Airplane: Disable Paper timings by default by Paul Sauve
+    private static void timings() {
+        BloomConfig.timingsReallyEnabled = BloomConfig.getBoolean("timings.really-enabled", false);
+    }
+
+    public static @NotNull Optional<Object> getOptional(@NotNull String path) {
+        return Optional.ofNullable(config.get(path));
+    }
+
+    public static @Nullable Object get(@NotNull String path, @NotNull Object def) {
+        BloomConfig.config.addDefault(path, def);
+        return config.get(path, BloomConfig.config.get(path));
+    }
+
+    public static int getInt(@NotNull String path, int def) {
+        BloomConfig.config.addDefault(path, def);
+        return BloomConfig.config.getInt(path, BloomConfig.config.getInt(path));
+    }
+
+    public static boolean getBoolean(@NotNull String path, boolean def) {
+        BloomConfig.config.addDefault(path, def);
+        return BloomConfig.config.getBoolean(path, BloomConfig.config.getBoolean(path));
+    }
+
+    public static long getLong(@NotNull String path, long def) {
+        BloomConfig.config.addDefault(path, def);
+        return BloomConfig.config.getLong(path, BloomConfig.config.getLong(path));
+    }
+
+    public static double getDouble(@NotNull String path, double def) {
+        BloomConfig.config.addDefault(path, def);
+        return BloomConfig.config.getDouble(path, BloomConfig.config.getDouble(path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index a934226dc9a273fac03c21227f7ef3d50ea080c4..eb93af9b224afc881dc604f87bc964b2a48d1651 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2,9 +2,6 @@ package net.minecraft.server;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -1654,7 +1651,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Paper"; // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "Bloom"; // Bloom - Bloom > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index b42327dcf0cc9feaf4fdb67de949dd36cf71bbaa..406c7df16abecfc0d04fc0067b3cb949548e894b 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,20 +1,21 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
+//import com.google.common.collect.Lists; // Bloom
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
+
+//import java.io.BufferedReader; // Bloom
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.InputStreamReader;
+//import java.io.InputStreamReader; // Bloom
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
+//import java.nio.charset.StandardCharsets; // Bloom
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
+//import java.util.Collections; // Bloom
+//import java.util.List; // Bloom
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
@@ -218,7 +219,18 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             this.getProfileCache().save(false); // Paper
         }
         this.getPlayerList().loadAndSaveFiles(); // Must be after convertNames
+<<<<<<< HEAD
         // Paper end - moved up
+=======
+        // Paper end
+        // Bloom start
+        com.katanamajesty.bloom.server.BloomConfig.init((java.io.File) options.valueOf("bloom-settings"));
+        // Bloom end
+        // Paper start
+        io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // Paper - load mappings for stacktrace deobf and etc.
+        paperConfigurations.initializeGlobalConfiguration();
+        paperConfigurations.initializeWorldDefaultsConfiguration();
+>>>>>>> Added Bloom Configuration
         org.spigotmc.WatchdogThread.doStart(org.spigotmc.SpigotConfig.timeoutTime, org.spigotmc.SpigotConfig.restartOnCrash);
         thread.start(); // Paper - start console thread after MinecraftServer.console & PaperConfig are initialized
         io.papermc.paper.command.PaperCommands.registerCommands(this);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a8cf1ab9d7504dfdb2310f1dca82324a225bea7d..8b54182ee30353cf70c2a14a756d96915ff456d5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -236,6 +236,7 @@ import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -246,7 +247,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Paper"; // Paper
+    private final String serverName = "Bloom"; // Bloom // Paper
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -975,6 +976,9 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
         }
+        // Bloom start
+        com.katanamajesty.bloom.server.BloomConfig.init((File) console.options.valueOf("bloom-settings"));
+        // Bloom end
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
         this.pluginManager.clearPlugins();
@@ -2724,6 +2728,13 @@ public final class CraftServer implements Server {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
+        // Bloom start
+        @NotNull
+        @Override
+        public YamlConfiguration getBloomConfig() {
+            return com.katanamajesty.bloom.server.BloomConfig.config;
+        } // Bloom end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index c55ae77807e0ec3698f0d0443caaf18928b41017..9b9aa20b10321807b45a2cd402688a811b8c027a 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -10,6 +10,7 @@ import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import net.minecraft.util.ExceptionCollector;
@@ -158,6 +159,21 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // Bloom start
+//                if (!BloomConfiguration.getConfigurationFolder().isBlank()) {
+//                    acceptsAll(asList("bloom-directory", "bloom-settings-directory"), "Bloom configuration directory")
+//                            .withRequiredArg()
+//                            .ofType(File.class)
+//                            .defaultsTo(new File(BloomConfiguration.getConfigurationFolder()))
+//                            .describedAs("Config directory");
+//                }
+                acceptsAll(asList("bloom", "bloom-settings"), "Bloom configuration file")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("bloom.yml"))
+                        .describedAs("Yml file");
+                // Bloom end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 7c1e510a0ad4b69c1fedc3367a8216046efb228e..007fd8ac15204623d62cd02a91a164b0fe2acbe9 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -361,7 +361,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return file.delete();
     }
 
-    private static final List<String> SUPPORTED_API = Arrays.asList("1.13", "1.14", "1.15", "1.16", "1.17", "1.18", "1.19");
+    private static final List<String> SUPPORTED_API = List.of("1.19"); // Bloom - Supported only from 1.19-R0.1-SNAPSHOT
 
     @Override
     public void checkSupported(PluginDescriptionFile pdf) throws InvalidPluginException {
@@ -430,7 +430,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new com.destroystokyo.paper.PaperVersionFetcher();
+        return new com.katanamajesty.bloom.BloomVersionFetcher(); // Bloom
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 774556a62eb240da42e84db4502e2ed43495be17..1220ac8c78d86d9092b27a69d3677e6fe9e061bf 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/io.papermc.paper/paper-api/pom.properties");
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/com.katanamajesty.bloom/bloom-api/pom.properties"); // Bloom
         Properties properties = new Properties();
 
         if (stream != null) {
