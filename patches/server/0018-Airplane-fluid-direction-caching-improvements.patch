From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KatanaMajesty <sasha.panasenk@gmail.com>
Date: Sun, 17 Jul 2022 20:28:49 +0300
Subject: [PATCH] Airplane fluid direction caching improvements


diff --git a/src/main/java/com/katanamajesty/bloom/container/FluidDirectionCacheContainer.java b/src/main/java/com/katanamajesty/bloom/container/FluidDirectionCacheContainer.java
new file mode 100644
index 0000000000000000000000000000000000000000..9f4c32450a9bcf0d3d2e2ed3eafa9bf105917389
--- /dev/null
+++ b/src/main/java/com/katanamajesty/bloom/container/FluidDirectionCacheContainer.java
@@ -0,0 +1,116 @@
+package com.katanamajesty.bloom.container;
+
+import it.unimi.dsi.fastutil.HashCommon;
+
+public class FluidDirectionCacheContainer<T> {
+
+    private static class FluidDirectionEntry<T> {
+        private final T data;
+        private final boolean flag;
+        private int age = 0;
+        private int uses = 0;
+
+        FluidDirectionEntry(T data, boolean flag) {
+            this.data = data;
+            this.flag = flag;
+        }
+
+        public int getValue() {
+            return uses - (age / 2);
+        }
+
+        public void incrementUses() {
+            uses = (uses + 1) & Integer.MAX_VALUE;
+        }
+
+        public void incrementAge() {
+            age = (age + 1) & Integer.MAX_VALUE;
+        }
+    }
+
+    private final FluidDirectionEntry[] cache;
+    private final int maxIndex;
+    private final int maxDistance; // the most amount of entries to check for a value
+
+    public FluidDirectionCacheContainer(int size) {
+        int arraySize = HashCommon.nextPowerOfTwo(size);
+        cache = new FluidDirectionEntry[arraySize];
+        maxIndex = arraySize - 1;
+        maxDistance = Math.min(arraySize, 4);
+    }
+
+    // TODO: Bloom - experiment with return types, consider using bytes
+    public Boolean getValue(T data) {
+        FluidDirectionEntry current;
+        int pos;
+
+        if ((current = cache[pos = HashCommon.murmurHash3(data.hashCode()) & this.maxIndex]) == null) { // use MurmurHash3 instead of Airplane's usage of HashCommon::mix
+            return null;
+        } else if (data.equals(current.data)) {
+            current.incrementUses();
+            return current.flag;
+        }
+
+        int checked = 1;
+
+        while ((current = cache[pos = (pos + 1) & this.maxIndex]) != null) {
+            if (data.equals(current.data)) {
+                current.incrementUses();
+                return current.flag;
+            } else if (++checked >= this.maxDistance) {
+                break;
+            }
+        }
+
+        return null;
+    }
+
+    public void putValue(T data, boolean flag) {
+        FluidDirectionEntry<T> current;
+        int pos;
+
+        if ((current = cache[pos = HashCommon.murmurHash3(data.hashCode()) & this.maxIndex]) == null) { // use MurmurHash3 instead of Airplane's usage of HashCommon::mix
+            cache[pos] = new FluidDirectionEntry<>(data, flag);
+            return;
+        } else if (data.equals(current.data)) {
+            current.incrementUses();
+            return;
+        }
+
+        int checked = 1;
+
+        while ((current = cache[pos = (pos + 1) & this.maxIndex]) != null) {
+            if (data.equals(current.hashCode())) {
+                current.incrementUses();
+                return;
+            } else if (++checked >= this.maxDistance) {
+                forceAdd(data, flag);
+                return;
+            }
+        }
+
+        cache[pos] = new FluidDirectionEntry<>(data, flag);
+    }
+
+    public void forceAdd(T data, boolean flag) {
+        int pos = HashCommon.murmurHash3(data.hashCode() & this.maxIndex); // use MurmurHash3 instead of Airplane's usage of HashCommon::mix
+
+        int removePos = pos;
+        FluidDirectionEntry entryToRemove = cache[removePos];
+
+        for (int i = pos + 1; i < pos + maxDistance; i++) {
+            int p = i & this.maxIndex;
+            FluidDirectionEntry entry = cache[p];
+            if (entry.getValue() < entryToRemove.getValue()) {
+                entryToRemove = entry;
+                removePos = p;
+            }
+
+            entry.incrementAge();
+        }
+
+        // remove oldest and least used entry
+        cache[removePos] = new FluidDirectionEntry(data, flag);
+    }
+
+}
diff --git a/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java b/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java
index e1c0107a637f2981262ef6d5c2af7c1cc4c8ebd2..32f915600fb3a2a21ada3d4d58b847caebd1a040 100644
--- a/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java
+++ b/src/main/java/com/katanamajesty/bloom/server/BloomConfig.java
@@ -145,6 +145,16 @@ public class BloomConfig {
         });
     }
 
+    public static int fluidDirectionCacheSize;
+    private static void internalCaching() {
+        // initial value 2048 from Airplane seems to work fine
+        BloomConfig.fluidDirectionCacheSize = BloomConfig.getInt("internal-caching.fluid-direction-cache-size", 2048);
+        BloomConfig.setComment("internal-caching.fluid-direction-cache-size", """
+                Initial value of Bloom's fluid direction cache container, which replaces vanilla's.
+                Default size of 2048 should be okay for small-medium servers without large amount of farms
+                """);
+    }
+
     public static boolean enableMessageSignatures;
     private static void signatures() {
         BloomConfig.enableMessageSignatures = BloomConfig.getBoolean("signatures.enable-message-signatures", false);
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index ff40fe323964f173561a6838fb443e79abf9df38..873bb16e10f3a2e0ec56065b561b0e3f6b9fd714 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -43,6 +43,7 @@ public abstract class FlowingFluid extends Fluid {
     public static final BooleanProperty FALLING = BlockStateProperties.FALLING;
     public static final IntegerProperty LEVEL = BlockStateProperties.LEVEL_FLOWING;
     private static final int CACHE_SIZE = 200;
+    /* Bloom start - Airplane's fluid cache optimization
     private static final ThreadLocal<Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>> OCCLUSION_CACHE = ThreadLocal.withInitial(() -> {
         Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> object2bytelinkedopenhashmap = new Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey>(200) {
             protected void rehash(int i) {}
@@ -50,7 +51,14 @@ public abstract class FlowingFluid extends Fluid {
 
         object2bytelinkedopenhashmap.defaultReturnValue((byte) 127);
         return object2bytelinkedopenhashmap;
-    });
+    }); */
+
+    private static final ThreadLocal<com.katanamajesty.bloom.container.FluidDirectionCacheContainer<Block.BlockStatePairKey>> LOCAL_FLUID_DIRECTION_CACHE = ThreadLocal.withInitial(() -> {
+        // TODO: Bloom - mess with MurmurHash in linear-probing map and initial container size
+        // initial value 2048 from Airplane seems to work fine
+        return new com.katanamajesty.bloom.container.FluidDirectionCacheContainer<>(com.katanamajesty.bloom.server.BloomConfig.fluidDirectionCacheSize);
+    }); // Bloom end
+
     private final Map<FluidState, VoxelShape> shapes = Maps.newIdentityHashMap();
 
     public FlowingFluid() {}
@@ -239,16 +247,23 @@ public abstract class FlowingFluid extends Fluid {
     }
 
     private boolean canPassThroughWall(Direction face, BlockGetter world, BlockPos pos, BlockState state, BlockPos fromPos, BlockState fromState) {
+        /* Bloom start - use Airplane's fluid direction cache
         Object2ByteLinkedOpenHashMap object2bytelinkedopenhashmap;
 
         if (!state.getBlock().hasDynamicShape() && !fromState.getBlock().hasDynamicShape()) {
             object2bytelinkedopenhashmap = (Object2ByteLinkedOpenHashMap) FlowingFluid.OCCLUSION_CACHE.get();
         } else {
             object2bytelinkedopenhashmap = null;
+        } */
+        com.katanamajesty.bloom.container.FluidDirectionCacheContainer<Block.BlockStatePairKey> cache = null;
+
+        if (!state.getBlock().hasDynamicShape() && !fromState.getBlock().hasDynamicShape()) {
+            cache = FlowingFluid.LOCAL_FLUID_DIRECTION_CACHE.get();
         }
 
         Block.BlockStatePairKey block_a;
 
+        /*
         if (object2bytelinkedopenhashmap != null) {
             block_a = new Block.BlockStatePairKey(state, fromState, face);
             byte b0 = object2bytelinkedopenhashmap.getAndMoveToFirst(block_a);
@@ -258,19 +273,32 @@ public abstract class FlowingFluid extends Fluid {
             }
         } else {
             block_a = null;
+        } */
+        if (cache != null) {
+            block_a = new Block.BlockStatePairKey(state, fromState, face);
+            Boolean flag = cache.getValue(block_a);
+            if (flag != null) {
+                return flag;
+            }
+        } else {
+            block_a = null;
         }
 
         VoxelShape voxelshape = state.getCollisionShape(world, pos);
         VoxelShape voxelshape1 = fromState.getCollisionShape(world, fromPos);
         boolean flag = !Shapes.mergedFaceOccludes(voxelshape, voxelshape1, face);
 
+        /*
         if (object2bytelinkedopenhashmap != null) {
             if (object2bytelinkedopenhashmap.size() == 200) {
                 object2bytelinkedopenhashmap.removeLastByte();
             }
 
             object2bytelinkedopenhashmap.putAndMoveToFirst(block_a, (byte) (flag ? 1 : 0));
-        }
+        } */
+        if (cache != null) {
+            cache.putValue(block_a, flag);
+        } // Bloom end - use Airplane's fluid direction cache
 
         return flag;
     }
